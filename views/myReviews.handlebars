{{> navbar }}
MY REVIEWS
<div id="myReviews">
  <form>
    <div class="form-group">
      <label for="formGroupExampleInput">Title</label>
      <input type="text" name="title" class="form-control" id="title" placeholder="Title">
    </div>
    <div class="form-group">
      <label for="formGroupExampleInput2">Review</label>
      <input type="text" name="review" class="form-control" id="reviewBody" placeholder="Review">
    </div>
    <div class="form-group">
      <label for="formGroupExampleInput2">Username</label>
      <input type="text" name="username" class="form-control" id="userName" placeholder="Username">
    </div>
    <input class="btn btn-primary" id="postReview" type="submit" />
  </form>


  {{#each myReviews}}
  <div class="card" style="width: 18rem;">
    <div class="card-body">
      <h4 class="card-title">Book: {{title}}</h5>
    </div>
    <div class="card-body">
      <h5 class="card-rating">Rating: {{rating}}</h5>
    </div>
    <div class="card-body">
      <h5 class="card-review">Review: {{review}}</h5>
    </div>
  </div>
  {{/each}}
</div>
<script src="../js/reviews.js"></script>

{{!-- <script>
  const userNameInput = document.getElementById('username');
  const productInput = document.getElementById('product');
  const reviewInput = document.getElementById('review');
  const reviewForm = document.getElementById('review-form');

  // TODO: Add a comment explaining the functionality of this helper function
  const postReview = (review) =>
    // TODO: Add a comment explaining what sort of data we need to provide when invoking the fetch function for a POST request
    fetch('/api/reviews', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      // TODO: Add a comment describing why one would need to convert the JSON object to a string in this instance
      body: JSON.stringify(review),
    })
      .then((res) => res.json())
      .then((data) => {
        console.log('Successful POST request:', data);
        return data;
      })
      // TODO: Add a comment describing the functionality of the catch statement
      .catch((error) => {
        console.error('Error in POST request:', error);
      });

  // Listen for when the form is submitted
  {
    reviewForm.addEventListener('submit', (e) => {
      e.preventDefault();

      // Create a new review object from the input values
      const newReview = {
        username: userNameInput.value.trim(),
        product: productInput.value.trim(),
        review: reviewInput.value.trim(),
      };

      // Call our `postReview` method to make a POST request with our `newReview` object.
      postReview(newReview)
        .then((data) => alert(`Review added! Review ID: ${data.body.review_id}`))
        .catch((err) => console.error(err));
    });
  }
</script> --}}